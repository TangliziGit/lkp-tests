#!/usr/bin/env ruby
# frozen_string_literal: true

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($PROGRAM_NAME)))

require "#{LKP_SRC}/lib/monitor"

require 'optparse'
require 'yaml'

opt_set_key_value = {}
opt_type = 'output'
opt_monitor_url = nil
opt_close_time = nil

options = OptionParser.new do |opts|
  opts.banner = 'Usage: monitor [options] <filter>'
  opts.separator '       <filter> like: job_id=1 level=info'
  opts.separator '       monitor logs'
  opts.separator '       use ctrl+c to break'
  opts.separator ''
  opts.separator 'options:'

  opts.on('-u URL', '--url URL',
          'set Message Server API address, default is ws://localhost:11310/filter') do |monitor_url|
    opt_monitor_url = monitor_url
  end

  opts.on('-t type', '--type type', 'set monitor run type, default is output') do |type|
    opt_type = type
  end

  opts.on("-f 'KEY: VALUE'", "--filter 'KEY: VALUE'", 'add YAML hash to filter') do |key_value|
    opt_set_key_value.merge! YAML.load key_value
  end

  opts.on('-c time', '--close-time time', 'set monitor client auto close time(second)') do |time|
    opt_close_time = time
  end
end

options.parse!(ARGV)

ARGV.each do |arg|
  if arg.index '='
    opt_set_key_value.merge! YAML.load arg.sub(/=/, ': ')
    true
  else
    false
  end
end

if opt_set_key_value.empty?
  puts options
  exit
end

opt_set_key_value['job_id'] = opt_set_key_value['job_id'].to_s if opt_set_key_value['job_id']

monitor = Monitor.new
monitor.monitor_url = opt_monitor_url if opt_monitor_url
monitor.overrides = opt_set_key_value

monitor.run(opt_type, opt_close_time)
