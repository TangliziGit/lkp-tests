#! /usr/bin/env ruby

# frozen_string_literal: true

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($PROGRAM_NAME)))

require "#{LKP_SRC}/lib/job2sh"
require "#{LKP_SRC}/lib/distro_info"
require "#{LKP_SRC}/lib/scheduler_client"
require 'optparse'
require 'yaml'

opt_set_key_value = {}
opt_output_dir = nil
opt_auto_define_files = false

options = OptionParser.new do |opts|
  opts.banner = 'Usage: submit [options] jobs...'

  opts.separator '       submit test jobs to the scheduler'
  opts.separator ''
  opts.separator 'options:'

  opts.on("-s 'KEY: VALUE'", "--set 'KEY: VALUE'", 'add YAML hash to job') do |key_value|
    opt_set_key_value.merge! YAML.load key_value
  end

  opts.on('-o DIR', '--output DIR', 'save job yaml to DIR/') do |dir|
    if File.file? dir
      puts "Please input directory for job save yaml after '-o'"
      exit 1
    end
    opt_output_dir = dir
    Dir.mkdir(dir) unless File.directory? dir
  end

  opts.on("-a", "--auto-define-files", "auto add define_files") do
    opt_auto_define_files = true
  end
end

options.parse!(ARGV)

ARGV.delete_if do |arg|
  if arg.index '='
    opt_set_key_value.merge! YAML.load arg.sub(/=/, ': ')
    true
  else
    false
  end
end

if ARGV.size.zero?
  puts(options)
  exit
end

ARGV.each do |jobfile|
  jobs = Job2sh.new
  jobs.load(jobfile, true) || next
  jobs.overrides = opt_set_key_value
  jobs['testbox'] = opt_set_key_value['testbox'] if opt_set_key_value['testbox']
  jobs['tbox_group'] = tbox_group(jobs['testbox'])
  jobs['node_roles'] ||= 'server client' if jobs['cluster']
  jobs.each_jobs do |job|
    host = job['SCHED_HOST']
    port = job['SCHED_PORT']

    if !host || !port
      raise 'Please configure SCHED_HOST and SCHED_PORT first'
    end

    job["LKP_CGI_PORT"] = port
    job["LKP_SERVER"] = host

    job.add_pp
    job.add_define_files if opt_auto_define_files

    # get job shell function
    sh_run_job = job.sh_run_job
    sh_extract_stats = job.sh_extract_stats
    sh_define_files = job.sh_define_files

    sh_hash = {
      'job2sh' => {
        'run_job' => sh_run_job,
        'extract_stats' => sh_extract_stats,
        'define_files' => sh_define_files
      }
    }

    # merge job info
    job_hash = job.to_hash
    job_hash = job_hash.merge(sh_hash)

    # save job to yaml
    if opt_output_dir
      prefix = File.join(opt_output_dir, File.basename(jobfile, '.yaml'))
      unit_jobfile = prefix + '-' + job.path_params + '.yaml'
      job.save unit_jobfile
      puts "#{jobfile} => #{unit_jobfile}"
      next
    end

    # init scheduler client
    scheduler_client = SchedulerClient.new(host, port)

    # submit job
    job_json = job_hash.to_json
    job_id = scheduler_client.submit_job(job_json)
    puts("succeeded submitting #{jobfile}, got job id = #{job_id}")
  end
end
