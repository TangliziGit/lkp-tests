#! /usr/bin/env ruby

# frozen_string_literal: true

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($PROGRAM_NAME)))

require "#{LKP_SRC}/lib/job2sh"
require "#{LKP_SRC}/lib/distro_info"
require "#{LKP_SRC}/lib/scheduler_client"
require 'optparse'
require 'yaml'

opt_set_key_value = {}

options = OptionParser.new do |opts|
  opts.banner = 'Usage: submit-job [options] jobs...'

  opts.separator ''
  opts.separator 'options:'

  opts.on("-s 'KEY: VALUE'", "--set 'KEY: VALUE'", 'add YAML hash to job') do |key_value|
    opt_set_key_value.merge! YAML.load key_value
  end
end

options.parse!(ARGV)

ARGV.delete_if do |arg|
  if arg.index '='
    opt_set_key_value.merge! YAML.load arg.sub(/=/, ': ')
    true
  else
    false
  end
end

if ARGV.size.zero?
  puts(options)
  exit
end

distroinfo = LKP::DistroInfo.instance

ARGV.each do |jobfile|
  jobs = Job2sh.new
  jobs.load(jobfile, true) || next
  jobs.overrides = opt_set_key_value
  jobs['testbox'] = opt_set_key_value['testbox'] if opt_set_key_value['testbox']
  jobs['arch'] ||= distroinfo.systemarch
  jobs['tbox_group'] = tbox_group(jobs['testbox'])
  jobs['node_roles'] ||= 'server client' if jobs['cluster']
  jobs.each_jobs do |job|
    job.add_pp

    # get job shell function
    sh_run_job = job.sh_run_job
    sh_extract_stats = job.sh_extract_stats
    sh_hash = {'job2sh' => {'run_job' => sh_run_job, 'extract_stats' => sh_extract_stats}}

    # merge job info
    job_hash = job.to_hash
    job_hash = job_hash.merge(sh_hash)

    # init scheduler client
    host = job_hash['SCHED_IP'] || '127.0.0.1'
    port = job_hash['SCHED_PORT'] || 3000
    scheduler_client = SchedulerClient.new(host, port)

    # submit job
    job_json = job_hash.to_json
    job_id = scheduler_client.submit_job(job_json)
    puts("succeeded submitting #{jobfile}, got job id = #{job_id}")
  end
end
