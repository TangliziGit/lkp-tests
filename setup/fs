#!/bin/sh
# - fs
# - mkfs
# - mount
# - mount_option
# - nr_tmpfs

# This script supports 2 NFS mount schemes:
# fs1: followup scripts will see NFS mount_points only
# fs2: followup scripts will see NFS mount_points as well as original mount_points

[ -n "$fs" ] || exit 0

. $LKP_SRC/lib/reproduce-log.sh

[ -n "$mount_option" ] && mount_option="-o $mount_option"

def_mount=
def_mkfs=
fs_options() {
	case $fs in
	xfs)
		def_mount="-o inode64"
		[ "${raid_level#*raid}" != "$raid_level" ] && [ "$nr_partitions" -gt 1 ] && {
			def_mount="${def_mount},logbsize=262144"
			def_mkfs="-f -d agcount=$nr_partitions"
		}
		ensure_mkfs='-f'
		;;
	ext*)
		ensure_mkfs='-q -F'
		;;
	btrfs)
		;;
	f2fs)
		modprobe f2fs 2>/dev/null
		;;
	nfsv3)
		def_mount="-o vers=3"
		fs="nfs"
		;;
	nfsv4)
		def_mount="-o vers=4"
		fs="nfs"
		;;
	udf)
		;;
	ocfs2)
		ensure_mkfs='-q -F'
		;;
	esac
}

is_btrfs_raid_levels() {
	[ "$fs" = 'btrfs' ] && [ "$raid_level" = 'braid0' -o \
				 "$raid_level" = 'braid1' -o \
				 "$raid_level" = 'braid5' -o \
				 "$raid_level" = 'braid6' -o \
				 "$raid_level" = 'braid10' ]
}

start_nfsd()
{
	local mp

	# exportfs: /fs does not support NFS export
	#
	# the solution is to either run this earlier
	#   mountpoint -q /fs || mount -t tmpfs fs /fs
	# or mount --bind to a tmpfs nfsv4 export root.
	#
	mountpoint -q /export || {
		log_cmd mkdir /export
		log_cmd mount -t tmpfs 'nfsv4_root_export' /export
	}
	echo "/export *(fsid=0,rw,no_subtree_check,no_root_squash)" > /etc/exports

	for mp
	do
		log_cmd mkdir -p /export/$mp
		log_cmd mount --bind $mp /export/$mp

		local entry="/export/$mp *(rw,no_subtree_check,no_root_squash)"
		log_eval "echo '$entry' >> /etc/exports"
	done

	log_cmd systemctl restart rpcbind
	log_cmd systemctl restart rpc-statd
	log_cmd systemctl restart nfs-idmapd
	log_cmd systemctl restart nfs-server || {
		systemctl status nfs-kernel-server.service
		cat /etc/exports
		exit 1
	}
}

mount_local_nfs()
{
	local dir
	for dir
	do
		local mnt=/nfs/$(basename $dir)
		local dev=localhost:$dir
		log_cmd mkdir -p $mnt
		log_cmd mount -t $fs ${mount:-$def_mount} $mount_option $dev $mnt || exit
		log_cmd touch $mnt/wait_for_nfs_grace_period
		nfs_mount_points="${nfs_mount_points}$mnt "
	done
}

: ${nr_tmpfs:=1}

mount_tmpfs()
{
	for i in $(seq 0 $((nr_tmpfs-1))); do
		local mnt=/fs/tmpfs$i
		log_cmd mkdir -p $mnt
		log_cmd mount -t tmpfs ${mount:-$def_mount} $mount_option none $mnt || exit
		mount_points="${mount_points}$mnt "
	done
}

make_fs() {
	is_btrfs_raid_levels && {
		log_cmd mkfs.btrfs --data ${raid_level#b} -m ${raid_level#b} $mkfs $ensure_mkfs $partitions || exit
		return
	}

	local pids=
	for dev in $bdevs
	do
		log_cmd mkfs -t $fs ${mkfs:-$def_mkfs} $ensure_mkfs $dev &
		pids="${pids} $! "
	done

	local pid
	for pid in $pids; do
		wait $pid || exit
	done
}

probe_filesystem()
{
	local fs=$1
	grep -w $fs /proc/filesystems || log_cmd modprobe $fs
}

mount_fs() {
	for dev in $bdevs
	do
		local mnt=/fs/$(basename $dev)
		log_cmd mkdir -p $mnt
		probe_filesystem $fs
		log_cmd mount -t $fs ${mount:-$def_mount} $mount_option $dev $mnt || exit
		mount_points="${mount_points}$mnt "
	done
}

if is_btrfs_raid_levels; then
	bdevs="${partitions%% *}"
else
	bdevs="$partitions"
fi

fs_options

case $fs in
	nfs)
		start_nfsd $mount_points
		mount_local_nfs $mount_points
		[ "${0#*fs1}" != "$0" ] && mount_points=
		;;

	tmpfs)
		mount_tmpfs
		;;

	*)
		. $LKP_SRC/lib/wipefs.sh
		if [ -n "$raid_device" ] || [ -n "$LKP_LOCAL_RUN" ]; then
			destroy_fs
		else
			destroy_devices
		fi
		make_fs
		mount_fs
		;;
esac

cat > "$TMP_RESULT_ROOT/post-run.fs" <<EOF

#!/bin/sh

umount_fs() {
	for mt in /nfs/* /fs/*; do
		mountpoint -q \$mt && umount \$mt
	done
}

umount_fs
EOF

cat >> $TMP/env.yaml <<EOF

# setup/fs
fs: $fs
mount_points: $nfs_mount_points $mount_points
EOF
