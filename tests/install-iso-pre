#!/bin/bash
# SPDX-License-Identifier: MulanPSL-2.0+
# Copyright (c) 2020 Huawei Technologies Co., Ltd. All rights reserved.

set -e

. $LKP_SRC/lib/debug.sh
. $LKP_SRC/lib/log.sh

check_params()
{
	log_info "start check params"

	local required_vars=(
		"iso_os"
		"iso_arch"
		"iso_version"
		"ROOTFS_SUFFIX"
		"VG_NAME"

		"HTTP_SERVER_HOST"
		"HTTP_SERVER_PORT"
		"HTTP_ROOT_DIR"
		"ROOTFS_ROOT_PASSWD"
		"rootfs_disk"

		"RSYNC_SERVER_HOST"
		"RSYNC_SERVER_PORT"
		"TFTP_SERVER_HOST"
		"NFS_SERVER_HOST"
		"NFS_ROOT_DIR"

		"LAB_Z9_URL"
		"MY_TOKEN"
	)

	for i in "${required_vars[@]}"
	do
		[ -n "$(eval echo \$$i)" ] || die "cannot get value of var: $i"
	done
}

create_vg()
{
	log_info "start create vg:$VG_NAME"

	local disk

	for disk in "${rootfs_disk[@]}"
	do
		log_info "start handle disk: $disk"
		pvdisplay ${disk} > /dev/null || pvcreate ${disk} || die "create pv failed: $disk"

		if vgdisplay ${VG_NAME} > /dev/null; then
			vgextend ${VG_NAME} ${disk}
		else
			vgcreate ${VG_NAME} ${disk}
		fi
	done

}

create_lv()
{
	log_info "start create lv:$LV_NAME"

	lvcreate -y -L 10G -n ${LV_NAME} ${VG_NAME} || die "create logical volume failed."
}

prepare_lv()
{
	log_info "start prepare logical volume"

	# activate lvm
	vgchange -ay

	# VG_NAME defines in job.yaml
	export VG_NAME
	export LV_NAME="${iso_os}_${iso_arch}_${iso_version}_${ROOTFS_SUFFIX}"

	# lv existed
	lvdisplay /dev/mapper/${VG_NAME}-${LV_NAME} > /dev/null && {
		log_info "iso already install to this testbox, so rootfs maybe already generated ok. please check it."
		exit 0
	}

	# lv not existed
	vgdisplay ${VG_NAME} > /dev/null || create_vg
	create_lv
}

generate_ks()
{
	log_info "start generate $ks_file"

	local nic=$(ip route get ${LKP_SERVER} | awk '{print $3; exit}')

	cat > ${ks_file} <<-EOF
	# Use network installation
	url --url="http://${HTTP_SERVER_HOST}:${HTTP_SERVER_PORT}/${HTTP_ROOT_DIR}/${iso_os}/${iso_arch}/${iso_version}/"

	# Network information
	network --bootproto=dhcp --device=${nic} --ipv6=auto --activate
	network  --hostname=localhost.localdomain

	# Specifies a list of disks for the installation program to use. All other disks are ignored.
	ignoredisk --only-use=${rootfs_disk#/dev/}

	# if installation target is a logical volume, bootloader should be none.
	bootloader --location=none
	logvol / --vgname=${VG_NAME} --name=${LV_NAME} --useexisting

	# Root password
	rootpw --iscrypted ${ROOTFS_ROOT_PASSWD}

	# Reboot after installation
	reboot --eject

	# Use text mode install
	text

	# Keyboard layouts
	keyboard --vckeymap=us --xlayouts='us'

	# System language
	lang en_US.UTF-8

	# Do not configure the X Window System
	skipx

	# System services
	services --enabled="chronyd"

	# System timezone
	timezone Asia/Shanghai --isUtc

	%packages
	@^minimal-environment

	%end

	%anaconda
	pwpolicy root --minlen=8 --minquality=1 --notstrict --nochanges --notempty
	pwpolicy user --minlen=8 --minquality=1 --notstrict --nochanges --emptyok
	pwpolicy luks --minlen=8 --minquality=1 --notstrict --nochanges --notempty
	%end
	EOF
}

upload_ks()
{
	log_info "start upload ks to rsync-server: ${RSYNC_SERVER_HOST}:${RSYNC_SERVER_PORT}"

	rsync -vrtopg --port ${RSYNC_SERVER_PORT} ${ks_file} ${RSYNC_SERVER_HOST}::ks/ || die "upload ks to rsync-server failed, please check."
}

prepare_ks()
{
	log_info "start prepare kickstart file"

	local ks_file=/tmp/${iso_os}_${iso_arch}_${iso_version}.ks

	generate_ks
	upload_ks
}

prepare_submit()
{
	${LKP_SRC}/sbin/install-dependencies.sh

	export CCI_REPOS="/c"

	mkdir -p $CCI_REPOS && cd $CCI_REPOS
	git clone $LAB_Z9_URL || die "clone lab-z9 git repo failed: $LAB_Z9_URL"

	local config_yaml="/etc/compass-ci/defaults/sparrow.yaml"
	mkdir -p $(dirname $config_yaml)
	cat >> $config_yaml <<-EOF
	SCHED_HOST: ${SCHED_HOST}
	SCHED_PORT: ${SCHED_PORT}
	my_name: ${my_name}
	my_email: ${my_email}
	my_token: ${MY_TOKEN}
	lab: z9
	EOF
}

submit_install_iso_yaml()
{
	:
}

submit_install_iso_firstboot_yaml()
{
	:
}

submit_install_iso_sync_rootfs_yaml()
{
	:
}

main()
{
	check_params

	prepare_lv
	prepare_ks
	prepare_submit

	submit_install_iso_yaml
	submit_install_iso_firstboot_yaml
	submit_install_iso_sync_rootfs_yaml
}

main
