#!/bin/bash
# - os
# - os_arch
# - os_version
# - os_mount
# - pkgbuild_repo
# - upstream_repo
# - upstream_url
# - upstream_commit
# - upstream_tag

## makepkg is a script that automates the building of packages; it can download and validate source files,
## check dependencies, configure build-time settings, compile the sources, install into a temporary root,
## make customizations, generate meta-info, and package everything together.
## See: https://wiki.archlinux.org/index.php/Makepkg

. $LKP_SRC/lib/debug.sh

check_vars()
{
  [ -n "$os" ]			|| die "os is empty"
  [ -n "$os_arch" ]		|| die "os_arch is empty"
  [ -n "$os_version" ]		|| die "os_version is empty"
  [ -n "$pkgbuild_repo" ]	|| die "pkgbuild_repo is empty"
  [ -n "$upstream_commit" ]	|| die "upstream_commit is empty"
  [ -n "$os_mount" ]		|| die "os_mount is empty"
}

mount_dest()
{
  # the same image is mounted to cifs and nfs, the generated cgz files
  # are stored in the nfs directory.
  [[ "$os_mount" = "cifs" ]] && os_mount="nfs"
  pack_to=${os_mount}/${os}/${os_arch}/${os_version}

  PKG_MNT=/initrd/build-pkg
  mkdir -p "$PKG_MNT"

  [ -n "$LKP_SERVER" ] && {
    mount -t cifs -o guest,vers=1.0,noacl,nouser_xattr //$LKP_SERVER$PKG_MNT $PKG_MNT || die "Failed to run mount"
  }
}

get_pkgfile()
{
  curl -sS -H 'Content-Type: Application/json' -XPOST "$LKP_SERVER"':8100/git_command' \
   -d '{"git_repo": "'$1'", "git_command": ["git-show", "HEAD:'$2'"]}' -o "${2##*/}"
}

request_pkg()
{
  local pkgrepo="${pkgbuild_repo%%//*}"
  local pkgpath="./"
  [[ "$pkgrepo" =~ ^archlinux/(packages|community) ]] && pkgpath="${pkgpath}${pkgbuild_repo#*//}/"

  filelist=$(curl -sS -H 'Content-Type: Application/json' -XPOST "$LKP_SERVER"':8100/git_command' \
   -d '{"git_repo": "'${pkgrepo}'", "git_command": ["git-ls-files", "'${pkgpath}'"]}')

  for pkgfile in ${filelist[*]}
  do
    get_pkgfile "${pkgrepo}" "$pkgfile"
  done

  [ -f PKGBUILD ] || die "PKGBUILD not exist"
  [ -s PKGBUILD ] || die "PKGBUILD is empty"
}

create_softlink()
{
	[ -e "$cgz_name" ] || return 0

	local soft_path="$PKG_MNT/${pack_to}/${pkgname}"
	local bm_name=$(basename $(realpath ${cgz_name}))

	if [ -n "$upstream_tag" ]; then
		echo "create soft link: ${upstream_tag}.cgz -> ${bm_name}"
		ln -sf "${bm_name}" "${soft_path}/${upstream_tag}.cgz"
	fi

	echo "create soft link: latest.cgz -> ${bm_name}"
	ln -sf "${bm_name}" "${soft_path}/latest.cgz"
}

build_source_pkg()
{
  local repo_dir=""
  source PKGBUILD
  [ -n "$upstream_repo" ] && [ -n "$upstream_url" ] && {

	if [[ "$source" = *::* ]]; then
		repo_dir="${source%%::*}::"
	else
		repo_dir="$(basename ${upstream_url})"
		repo_dir="${repo_dir%.git*}::"
	fi

	upstream_source="source=(\"${repo_dir}git://${LKP_SERVER}/${upstream_repo}#commit=${upstream_commit}\")"
	sed -i "s|^source=.*|${upstream_source}|g" PKGBUILD
  }

  cgz_name="$PKG_MNT/${pack_to}/${pkgname}/${upstream_commit}.cgz"
  PACMAN=true BUILDDIR=$TMP CARCH=$os_arch PKGEXT=.cgz CGZDEST="$cgz_name" \
    $LKP_SRC/sbin/makepkg -A --check --skippgpcheck --config $LKP_SRC/etc/makepkg.conf 2>&1

  [ "$?" == 0 ] && create_softlink
}

check_vars
mount_dest
request_pkg
build_source_pkg
