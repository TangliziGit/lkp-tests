#!/bin/bash
# - pkgbuild_repo
# - upstream_repo
# - upstream_commit
# - git_tag
# - pkg_ver
# - config
# upstream_url

# We'll use the below global env vars, but not treat them as parameter to avoid
# duplicates in result path like /openeuler-20.03-aarch64/openeuler-aarch64-cifs-2003/
# - os
# - os_arch
# - os_version
# - os_mount

## makepkg is a script that automates the building of packages; it can download and validate source files,
## check dependencies, configure build-time settings, compile the sources, install into a temporary root,
## make customizations, generate meta-info, and package everything together.
## See: https://wiki.archlinux.org/index.php/Makepkg

. $LKP_SRC/lib/debug.sh
. $LKP_SRC/distro/common
. $LKP_SRC/lib/http.sh

check_vars()
{
	[ -n "$os" ]			|| die "os is empty"
	[ -n "$os_arch" ]		|| die "os_arch is empty"
	[ -n "$os_version" ]		|| die "os_version is empty"
	[ -n "$pkgbuild_repo" ]		|| die "pkgbuild_repo is empty"
	[ -n "$upstream_commit" ]	|| die "upstream_commit is empty"
	[ -n "$os_mount" ]		|| die "os_mount is empty"
}

get_config()
{
	local cci_http_host=${INITRD_HTTP_HOST}
	local cci_http_port=${INITRD_HTTP_PORT:-8800}
	export cci_dir=/cci/build-config
	local remote_dir="http://${cci_http_host}:${cci_http_port}${cci_dir}/${pkgname}"

	mkdir -p ${cci_dir}

	[ -n "$config" ] || return
	http_get_file "${remote_dir}/${config}" "${cci_dir}/${pkgname}/${config}"
}

upload_config()
{
	local upload_dir="${cci_dir}/${pkgname}"
	[ -d "${upload_dir}" ] || return

	upload_to_target_dir "${upload_dir}"
}

mount_dest()
{
	# the same image is mounted to cifs and nfs, the generated cgz files
	# are stored in the nfs directory.
	[[ "$os_mount" = "cifs" ]] && os_mount="nfs"
	pack_to=${os_mount}/${os}/${os_arch}/${os_version}

	PKG_MNT=/initrd/build-pkg
	mkdir -p "$PKG_MNT"
}

get_pkgfile()
{
	curl -sS -H 'Content-Type: Application/json' -XPOST "$LKP_SERVER"':8100/git_command' \
		-d '{"git_repo": "'$1'", "git_command": ["git-show", "HEAD:'$2'"]}' -o "${2##*/}"
}

request_pkg()
{
	local pkgrepo="${pkgbuild_repo%%//*}"
	local pkgpath="./"
	[[ "$pkgrepo" =~ ^archlinux/(packages|community) ]] && pkgpath="${pkgpath}${pkgbuild_repo#*//}/"

	filelist=$(curl -sS -H 'Content-Type: Application/json' -XPOST "$LKP_SERVER"':8100/git_command' \
		-d '{"git_repo": "'${pkgrepo}'", "git_command": ["git-ls-files", "'${pkgpath}'"]}')

	for pkgfile in ${filelist[*]}
	do
		get_pkgfile "${pkgrepo}" "$pkgfile"
	done
}

create_cgz_name()
{
	[ -n "${pkgbase}" ] && pkgname="${pkgbase}"

	cgz_path="$PKG_MNT/${pack_to}/${pkgname}"
	cgz_name="${cgz_path}/${upstream_commit}.cgz"
	pkg_args="-A --check --skippgpcheck"

        [ -n "$git_tag" ] && {
		cgz_name="${cgz_path}/${git_tag}-${pkgrel}.cgz"
	}

	[ -n "$pkg_ver" ] && {
		cgz_name="${cgz_path}/${pkg_ver}-${pkgrel}.cgz"
		pkg_args="${pkg_args} --skipchecksums --skipinteg"
	}
}

create_softlink()
{
	[ -e "$cgz_name" ] || return 0

	local bm_name=$(basename $(realpath ${cgz_name}))

	echo "create soft link: latest.cgz -> ${bm_name}"
	ln -sf "${bm_name}" "${cgz_path}/latest.cgz"
}

replace_source()
{
	echo "source=(" > $1
	for url in ${source[@]}
	do
		echo "$url" | egrep 'git\+|\.git$' && {
			[ -n "$repo_dir" ] && {
				url="${repo_dir}git://${LKP_SERVER}/${upstream_repo}#commit=${upstream_commit}"
				[ -n "$git_tag" ] && {
					url="${repo_dir}git://${LKP_SERVER}/${upstream_repo}#tag=${git_tag}"
				}
			}
		}
		url=$(echo "$url" | sed 's|https://|http://|g')

		echo \'$url\' >> $1
	done
	echo ")" >> $1
}

build_source_pkg()
{
	[ -n "$pkg_ver" ] && sed -i "s|^pkgver=.*|pkgver=${pkg_ver}|g" PKGBUILD

	repo_dir=""
	source PKGBUILD
	[ -n "$upstream_repo" ] && [ -n "$upstream_url" ] && {

		if [[ "$source" = *::* ]]; then
			repo_dir="${source%%::*}::"
		else
			repo_dir="$(basename ${upstream_url})"
			repo_dir="${repo_dir%.git*}::"
		fi
	}
	replace_source PKGBUILD.src
	create_cgz_name
	get_config

	PACMAN=true BUILDDIR=$TMP CARCH=$os_arch PKGEXT=.cgz CGZDEST="$cgz_name" \
		$LKP_SRC/sbin/makepkg ${pkg_args} --config $LKP_SRC/etc/makepkg.conf

	local build_state="$?"

	upload_config

	[ "${build_state}" == "0" ] || exit 1
	create_softlink
	upload_to_target_dir ${PKG_MNT}/${pack_to}/${pkgname}
}

check_vars
mount_dest
request_pkg
build_source_pkg
