#!/bin/bash
# - upstream_repo
# - compat_os
# - repo_name
# - repo_addr
# - custom_repo_name
# - custom_repo_addr
# - whether_email
# Git repo jobs only use the first two parameters, SRPMs jobs use all
# user can add custom_repo_name and custom_repo_addr to setup
# local repo, value can be an array

. $LKP_SRC/lib/debug.sh
. $LKP_SRC/lib/upload.sh
. $LKP_SRC/lib/rpm.sh
. $LKP_SRC/lib/email.sh

: "${compat_os:=budding-openeuler}"

[ -n "$upstream_repo" ] || die "upstream_repo is empty"

dest_dir="/rpm/upload/${os}-${os_version}/${compat_os}"

die()
{
	rpmbuild_email "rpmbuild_failed"
	echo "$@" 1>&2
	exit 99
}

from_git()
{
	package_name=${upstream_repo##*/}
	rpm_dest="${dest_dir}/${os_arch}/Packages"
	src_rpm_dest="${dest_dir}/source/Packages"

	init_workspace
	download_upstream_repo
}

git_pretty_format()
{
	curl -sS -H 'Content-Type: Application/json' -XPOST "$LKP_SERVER"':8100/git_command' -d '{"git_repo": "'${upstream_dir}/${upstream_repo}.git'", "git_command": ["git-log","-n1","--pretty=format:'$1'", "'${upstream_commit}'"]}'
}

rpmbuild_email()
{
	[ -n "$whether_email" ] && {
		author_email=$(git_pretty_format "%ae")
		author_name=$(git_pretty_format "%an")
		send_email $1
	}
}

from_srpm()
{
	[ -n "$repo_name" ] || die "repo_name is empty"
	[ -n "$repo_addr" ] || die "repo_addr is empty"

	rpm_dest="${dest_dir}/${repo_name}/${os_arch}/Packages"
	src_rpm_dest="${dest_dir}/${repo_name}/source/Packages"

	install_srpm
}


init_workspace()
{
	# generate workspace in ${HOME}
	rpmdev-setuptree
}

download_upstream_repo()
{
	local url="git://${GIT_SERVER}/${upstream_dir}/${upstream_repo}"

	git clone -q "$url" || die "clone git repo ${package_name} failed: $url"
	cd "$package_name" || exit
	filelist=($(git ls-files))

	for pkgfile in "${filelist[@]}"
	do
		local dir="SOURCES"

		echo "$pkgfile" | grep -q -E "\\.spec$" && dir="SPECS"
		mv "$pkgfile" "${HOME}/rpmbuild/${dir}/"
	done
}

install_srpm()
{
	rpm -i "${repo_addr}/${upstream_repo}" >/dev/null || die "failed to install source rpm: ${repo_addr}/${upstream_repo}"
}

build_rpm()
{
	local spec_dir="${HOME}/rpmbuild/SPECS"
	[ -n "$package_name" ] &&
		{
			# HTTP is proxy cache friendly
			sed -i 's/^\(Source[^ ]*:[ \t]*\)https/\1http/g' "$(grep http -rl "$spec_dir/"*.spec)"
		}
	# Install build depends
	yum-builddep -y "$spec_dir"/*.spec || die "failed to solve dependencies"
	# Download tar.gz to default path ${HOME}/rpmbuild/SOURCE
	[ -n "$package_name" ] &&
		{
			spectool -g -R "$spec_dir/"*.spec || die "failed to download source file"
		}
	# Building rpm or srpm packages
	rpmbuild -ba "$spec_dir"/*.spec || die "failed to build rpms"
}

show_rpm_files()
{
	find ${HOME}/rpmbuild/RPMS -type f -name "*.rpm"
}

show_src_rpm_files()
{
	find ${HOME}/rpmbuild/SRPMS -type f -name "*.rpm"
}

upload_rpm_pkg()
{
	local rpm_file
	for rpm_file in $(show_rpm_files)
	do
		upload_one_curl ${rpm_file} ${rpm_dest}
	done

	local src_rpm_file
	for src_rpm_file in $(show_src_rpm_files)
	do
		upload_one_curl ${src_rpm_file} ${src_rpm_dest}
	done
}

handle_rpm_list()
{
	rpm_list=($(show_rpm_files | xargs basename -a))
	srpm_list=($(show_src_rpm_files | xargs basename -a))
	full_list=("${rpm_list[@]}" "${srpm_list[@]}")
	j=0

	for rpm_name in "${full_list[@]}"
	do
		full_list[$j]="\"/srv${rpm_dest}/${rpm_name}\""
		[[ ${rpm_name} =~ "src.rpm" ]] && full_list[$j]="\"/srv${src_rpm_dest}/${rpm_name}\""
		((j++))
	done

	full_list=$(echo "${full_list[@]}" | sed 's; ;,;g')
}

update_repo_mq()
{
	handle_rpm_list

	curl -H 'Content-Type: Application/json' -XPOST "${LKP_SERVER}:10003/upload" \
		-d "{\"upload_rpms\": ["${full_list}"]}"
}

add_repo
[ -n "$repo_name" ] && from_srpm || from_git
build_rpm
upload_rpm_pkg
update_repo_mq
rpmbuild_email "rpmbuild_success"
