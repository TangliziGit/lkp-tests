#!/bin/sh
# - test

## Regression test suite for xfs and other filesystems.

. $LKP_SRC/lib/job.sh
. $LKP_SRC/lib/debug.sh
. $LKP_SRC/lib/upload.sh
. $LKP_SRC/lib/reproduce-log.sh
. $LKP_SRC/lib/tests/common.sh
. $LKP_SRC/lib/env.sh

[ "$nr_partitions" -lt 2 ] && die "$nr_partitions -lt 2"
cd $BENCHMARK_ROOT/xfstests || die "fail to cd $BENCHMARK_ROOT/xfstests"

check_add_user()
{
	[ "x$1" != "x" ] || return
	grep -q -w "$1" /etc/passwd && return
	# 123456-fsgqa is a invalid user name on Clear, useradd doesn't work
	useradd -m "$1" >/dev/null 2>&1 || {
		if is_clearlinux; then
			mkdir /home/$1
			echo "$1:x:666" >> /etc/group
			echo "$1:x:666:666::/home/$1:/bin/bash" >> /etc/passwd
			# avoid error "su: Authentication service cannot retrieve authentication info"
			echo "$1:!:17884::::::" >> /etc/shadow
			chown -R $1:$1 /home/$1
			chmod -R go= /home/$1
		else
			echo "$(basename $0): useradd $1 failed" 1>&2
		fi
	}
}

create_virtual_disk()
{
	dd if=/dev/zero of=raw.img bs=1M count=$1 || return
	mkfs -t $fs raw.img || return
	losetup /dev/loop0 raw.img || return
	has_virtual_disk=true
}

# check whether the machine is partitioned already
is_disc_partitioned()
{
	# eg. if not partition yet, $partitions=/dev/vdb /dev/vdc /dev/vdd
	# otherwise, $partitions=/dev/sda5 /dev/sda6 /dev/sda7 /dev/sda8
	sed_result=$(echo "$partitions" | sed -n '/[0-9]$/p')
	[ -n "$sed_result" ]
}

set_env()
{
	# "fsgqa" user is required in some of xfstests, thus check if such user
	# has already been added. If not, add "fsgqa" user.
	check_add_user "fsgqa"
	check_add_user "123456-fsgqa"
	check_add_user "fsgqa2"

	umount $mount_points

	# clear filesystem in partition
	for dev in ${partitions#* }
	do
		dd if=/dev/zero bs=512 count=512 of=$dev
	done

	log_eval export TEST_DIR=${mount_points%% *}
	log_eval export TEST_DEV=${partitions%% *}

	# f2fs needs this to prevent mount failure
	log_eval export FSTYP=$fs
	log_eval export SCRATCH_MNT=/fs/scratch

	log_cmd mkdir $SCRATCH_MNT -p

	if [ "$fs" = btrfs ] && [ "$nr_partitions" -ge 4 ]; then
		log_eval export SCRATCH_DEV_POOL=\"${partitions#* }\"
	else
		log_eval export SCRATCH_DEV=${partitions##* }
	fi

	[ "$fs" = f2fs ] && log_eval export MKFS_OPTIONS="-f"

	## We could use the "pack-deps" job to generate the relevant dependency package with cgz format,
	## but sometimes the dependency package have a different layout with the original package.
	## For examle:
	## 1)the command "btrfs" under directory /sbin  in original rootfs.
	## 2)the command "btrfs" under directory /bin  in dependency packages.
	## this will result in the newer btrfs command can't override the original btrfs command,
	## moreover, /bin behind with /sbin directory in the default "PATH" environment.
	## so we need to adjust the "PATH" search order.
	export PATH="/bin/":$PATH

	if [ "$fs" = xfs ] && [ "$nr_partitions" -ge 3 ]; then
		SCRATCH_LOGDEV=${partitions#* }
		SCRATCH_LOGDEV=${SCRATCH_LOGDEV%% *}
		log_eval export SCRATCH_LOGDEV="$SCRATCH_LOGDEV"
	fi

	[ "${test%%-*}" = "xfs" ] && {
		log_eval export SCRATCH_XFS_LIST_METADATA_FIELDS=u3.sfdir3.hdr.parent.i4
		log_eval export SCRATCH_XFS_LIST_FUZZ_VERBS=random
	}

	[ "$test" = "xfs-no_bug_assert" ] && {
		[ -f /sys/fs/xfs/debug/bug_on_assert ] && echo 0 > /sys/fs/xfs/debug/bug_on_assert
	}

	[ "$test" = "xfs-083" -o "$test" = "xfs-275" ] && {
		log_eval export USE_EXTERNAL=yes
		# create a 100M partition for log, avoid
		# log size 67108864 blocks too large, maximum size is 1048576 blocks
		# if had partition already, create a virtual disk for log
		if is_disc_partitioned; then
			create_virtual_disk 100 || die "fail to create a virtual disk for log"
			log_eval export SCRATCH_LOGDEV="/dev/loop0"
		else
			printf "n\np\n1\n\n+100M\nw\n" | fdisk $SCRATCH_LOGDEV
			log_eval export SCRATCH_LOGDEV="$SCRATCH_LOGDEV"1
		fi
	}

	[ "$test" = "xfs-437" ] && {
		echo "LC_ALL=en_US.UTF-8" >> /etc/environment
		echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
		echo "LANG=en_US.UTF-8" > /etc/locale.conf
		locale-gen en_US.UTF-8
		log_eval export WORKAREA="$BENCHMARK_ROOT/xfstests/xfsprogs-dev"
	}

	[ "$test" = "xfs-external" ] && {
		log_eval export USE_EXTERNAL="yes"
		log_eval export SCRATCH_RTDEV="$SCRATCH_LOGDEV"
		log_eval export MKFS_OPTIONS="-mreflink=1"
		log_eval unset SCRATCH_LOGDEV
	}
	[ "$test" = "xfs-reflink_rmapbt" ] && log_eval export MKFS_OPTIONS="\"-mreflink=1 -mrmapbt=1\""
	[ "$test" = "xfs-reflink" ] && log_eval export MKFS_OPTIONS="-mreflink=1"
	[ "$test" = "xfs-rmapbt" ] && log_eval export MKFS_OPTIONS="-mrmapbt=1"
	[ "$test" = "xfs-244" ] && log_eval export MKFS_OPTIONS="-mcrc=0"
	[ "$test" = "xfs-132" ] && (mkfs.xfs -f -mreflink=1 $TEST_DEV || die "mkfs.xfs test_dev failed")

	if [ "$fs" = xfs ] && [ "${test%%[0-9]*}" = "generic-group" ]; then
		mkfs.xfs -f -mreflink=1 $TEST_DEV || die "mkfs.xfs test_dev failed"
		log_eval export MKFS_OPTIONS="-mreflink=1"
	fi

	[ "$test" = "generic-387" ] && {
		[ -n "$SCRATCH_DEV_POOL" ] && {
			SCRATCH_DEV=${SCRATCH_DEV_POOL##* }
			log_eval unset SCRATCH_DEV_POOL
		}
		if is_disc_partitioned; then
			create_virtual_disk 1k || die "fail to create a virtual disk for log"
			log_eval export SCRATCH_DEV="/dev/loop0"
                else
			printf "n\np\n1\n\n+1G\nw\n" | fdisk $SCRATCH_DEV
			log_eval export SCRATCH_DEV="$SCRATCH_DEV"1
		fi
	}

	# need at least 3 partitions for TEST_DEV, SCRATCH_DEV and LOGWRITES_DEV
	if [ "$test" = "generic-logwrites" ] && [ "$nr_partitions" -ge 3 ]; then
		LOGWRITES_DEV=${partitions#* }
		LOGWRITES_DEV=${LOGWRITES_DEV%% *}
		log_eval export LOGWRITES_DEV="$LOGWRITES_DEV"
		[ "$fs" = "xfs" ] && log_eval export MKFS_OPTIONS="-mreflink=1"
		[ "$fs" = "btrfs" ] && [ -n "$SCRATCH_DEV_POOL" ] && {
			log_eval export SCRATCH_DEV=${SCRATCH_DEV_POOL##* }
			log_eval unset SCRATCH_DEV_POOL
		}
	fi

	if [ "$test" = "generic-470" ] && [ "$nr_partitions" -ge 3 ]; then
		LOGWRITES_DEV=${partitions#* }
		LOGWRITES_DEV=${LOGWRITES_DEV%% *}
		log_eval export LOGWRITES_DEV="$LOGWRITES_DEV"
		[ "$fs" = "xfs" ] && unset MKFS_OPTIONS
	fi

        [ "$test" = "ext4-029" ] && {
		log_eval export USE_EXTERNAL=yes

		# create a 100M partition for log, avoid test cost too much time
		# if had partition already, create a virtual disk for log
		if is_disc_partitioned; then
			create_virtual_disk 100 || die "fail to create a virtual disk for log"
			log_eval export SCRATCH_LOGDEV="/dev/loop0"
		else
			SCRATCH_LOGDEV=${partitions#* }
			SCRATCH_LOGDEV=${SCRATCH_LOGDEV%% *}
			printf "n\np\n1\n\n+100M\nw\n" | fdisk $SCRATCH_LOGDEV
			log_eval export SCRATCH_LOGDEV="$SCRATCH_LOGDEV"1
		fi
	}
}

run_test()
{
	## Currently, we support the following several format's test item.
	## Not-run, out-mismatch files are hard to maintain and do not use in the test, so remove them.
	## With "generic" testcase as an example:
	## - generic-all
	## - generic-127
	## - generic-quick/mid/slow1/slow2
	## - generic-new

	local test_dir="/$BENCHMARK_ROOT/xfstests/tests"

	# the ignore file like xfs-ignore, but $test like xfs-group1, so need to get its prefix.
	local test_ignore="$test_dir/${test%-*}-ignore"
	# /$BENCHMARK_ROOT/xfstests/${test%-*}-ignore is built from upstream denylist
	test_ignore="$test_ignore /$BENCHMARK_ROOT/xfstests/${test%-*}-ignore"

	local ignored_tests
	local ignored_tests_cmd
	local all_tests
	local all_tests_cmd

	if [ "${test#*-}" = "all" ]; then
		all_tests_cmd="cd tests && ls ${test%-*}/[0-9][0-9][0-9]"
		get_ignored_and_worked_tests "$all_tests_cmd"
	elif [ "${test#*-}" = "new" ]; then
		all_tests_cmd="cd tests && sed \"s:^:${test%-*}/:\" $test"
		get_ignored_and_worked_tests "$all_tests_cmd"
	elif [ "${test%[a-z4]-[0-9][0-9][0-9]}" != "$test" ]; then
		all_tests_cmd="echo ${test%-*}/${test#*-}"
		get_ignored_and_worked_tests "$all_tests_cmd"
	elif [ "${test%-*}" = "$fs" ]; then
		all_tests_cmd="sed \"s:^:${test%-*}/:\" $test_dir/$test"
		get_ignored_and_worked_tests "$all_tests_cmd" "$test_ignore"
	elif [ "${test#*-}" != "$test" ]; then
		generic_fs_ignore="$test_dir/${test%-*}-$fs-ignore /$BENCHMARK_ROOT/xfstests/tests/generic-$fs-ignore"
		all_tests_cmd="sed \"s:^:${test%-*}/:\" $test_dir/$test"
		get_ignored_and_worked_tests "$all_tests_cmd" "$test_ignore $generic_fs_ignore"
	else
		# Now rename $test-broken to $test-ignore wihch is easier to understand.
		all_tests_cmd="cd tests && ls $test/[0-9][0-9][0-9]"
		get_ignored_and_worked_tests "$all_tests_cmd" "$test_ignore"
	fi

	[ -n "$ignored_tests_cmd" ] && log_echo $ignored_tests_cmd
	for ignored_test in $ignored_tests
	do
		echo "ignored by lkp: $ignored_test"
	done

	[ -n "$all_tests_cmd" ] && log_echo $all_tests_cmd
	log_cmd ./check $all_tests
}

export LC_ALL=C
export LANG=C
# whether has created the virtual disk
has_virtual_disk=false
read_env_vars
set_env
run_test
exit_value=$?

# umonut the virtual disk
[ "$has_virtual_disk" = true ] && losetup -d /dev/loop0
upload_files -t results $BENCHMARK_ROOT/xfstests/results/*
exit $exit_value
