#!/bin/bash
set -e

umask 0002

# allow sut os array
# - if job's os not in this array, job won't execute
ALLOW_OS=(
	openeuler
)

WORKSPACE="/usr/local/iso2rootfs"
ENV_DIR="${WORKSPACE}/env"
ISO2QCOW2_DIR="${WORKSPACE}/iso2qcow2"
CCI_SRC="${WORKSPACE}/crystal-ci"

log_info()
{
	echo "[INFO] $*"
}

die()
{
	echo "[ERROR] $*" >&2
	exit 1
}

check_yaml_vars()
{
	log_info "starting check yaml vars ..."

	local yaml_vars=(
		"os"
		"os_arch"
		"os_version"
		"iso2rootfs_cgz"
		"iso_url_file"
		"iso_os"
		"iso_arch"
		"iso_version"
		"rootfs_nfs_server"
		"rootfs_nfs_path"
		"initrd_http_host"
		"initrd_http_port"
	)

	local yaml_t
	for yaml_t in "${yaml_vars[@]}"
	do
		[ -n "$(eval echo "\$${yaml_t}")" ] || die "var\(${yaml_t}\) is none"
	done
}

get_daily_iso_checksum()
{
	ISO_URL="$(curl "${iso_url_file}")"
	ISO_NAME=$(basename "$ISO_URL")
	ISO_CHECKSUM_URL="${ISO_URL}.sha256sum"

	SHA256SUM_NET=$(curl -s "$ISO_CHECKSUM_URL" | awk '{print $1}')
}

mount_nfs()
{
	local nfs_server_path="${rootfs_nfs_server}:${rootfs_nfs_path}/${iso_os}/${iso_arch}"
	NFS_LOCAL_PATH="${WORKSPACE}/crystal_os_${iso_os}_${iso_arch}"

	[ -d "${NFS_LOCAL_PATH}" ] || mkdir -p "$NFS_LOCAL_PATH"
	mount -t nfs "${nfs_server_path}" "${NFS_LOCAL_PATH}"
}

get_cache_iso_checksum()
{
	mount_nfs

	CHECKSUM_FILE_CACHE="${NFS_LOCAL_PATH}/${iso_version}-newest.sha256sum"
	[ ! -f "${CHECKSUM_FILE_CACHE}" ] ||
		SHA256SUM_CACHE=$(awk '{print $1}' "$CHECKSUM_FILE_CACHE")
}

check_sha256sum_update()
{
	get_cache_iso_checksum
	get_daily_iso_checksum

	if [ -n "$SHA256SUM_CACHE" ]
	then
		[ -n "$SHA256SUM_NET" ] || die "get net sha256sum failed !!!"

		if [ "$SHA256SUM_CACHE" == "$SHA256SUM_NET" ]
		then
			log_info "${iso_os} haven't release new iso, no need to generate rootfs"
			exit 0
		else
			log_info "${iso_os} release a new iso, start to generate rootfs ..."
			return
		fi

	else
		log_info "${CHECKSUM_FILE_CACHE} doesn't exist, start to generate rootfs ..."
		return
	fi
}

check_os()
{
	log_info "starting check os ..."
	echo "${ALLOW_OS[@]}" | grep -wq "${os}" ||
		die "current host \(${os}\) is not in \(${ALLOW_OS[@]}\), exit !!!"
}

get_cgz()
{
	local cgz_url="http://${initrd_http_host}:${initrd_http_port}/initrd/pkg/${os}/${os_arch}/${os_version}/${iso2rootfs_cgz}"
	local cgz_name
	cgz_name=$(basename "${cgz_url}")
	local cgz_path_t=${ENV_DIR}/${cgz_name}
	CGZ_PATH=${ENV_DIR}/${cgz_name%.cgz}

	[ -d "$ENV_DIR" ] || mkdir -p "$ENV_DIR"
	[ -f "${cgz_path_t}" ] && rm -f "${cgz_path_t}"
	wget -c -O "${cgz_path_t}" "${cgz_url}"

	[ -d "$CGZ_PATH" ] && rm -rf "$CGZ_PATH"
	mkdir -p "$CGZ_PATH"
	tar -xf "${cgz_path_t}" -C "${CGZ_PATH}"
}

install_pkgs()
{
	local pkg_installer
	command -v yum && pkg_installer="yum"

	[[ -n "$pkg_installer" ]] || die "can not find pkg installer !!!"

	local pt
	for pt
	do
		"$pkg_installer" install -y "$pt" || die "install pkg\($pt\) failed !!!"
	done
}

config_git_proxy()
{
	if [[ -n ${GITCACHE_HOST} ]] && [[ -n ${GITCACHE_PORT} ]]
	then
		git config --system url."http://${GITCACHE_HOST}:${GITCACHE_PORT}/".insteadOf "https://"
	fi
}

prepare_iso2rootfs()
{
	log_info "starting config iso2rootfs env ..."
	get_cgz

	source "${CGZ_PATH}/config"

	install_pkgs "git"
	config_git_proxy
}

get_code_iso2qcow2()
{
	[ -d "${ISO2QCOW2_DIR}" ] && rm -rf "${ISO2QCOW2_DIR}"
	git clone "$ISO2QCOW2_GIT_URL" "${ISO2QCOW2_DIR}"
}

config_pip_proxy()
{
	if [[ -n ${SQUID_HOST} ]] && [[ -n ${SQUID_PORT} ]]
	then
		sed -i "s|^PIP_PROXY=|PIP_PROXY=\"http://$SQUID_HOST:$SQUID_PORT\"|g" "${ISO2QCOW2_DIR}/conf/config"
	fi
}

config_iso_conf()
{
	local config_file="${ISO2QCOW2_DIR}/conf/iso/iso.conf"
	sed -i "s|^OS=.*|OS=\"${iso_os}\"|g" "$config_file"
	sed -i "s|^OS_ARCH=.*|OS_ARCH=\"${iso_arch}\"|g" "$config_file"
	sed -i "s|^OS_VERSION=.*|OS_VERSION=\"${iso_version}\"|g" "$config_file"
}

config_iso_url()
{
	local iso_url_file="${ISO2QCOW2_DIR}/conf/iso/net-iso/${iso_os}/${iso_arch}/${iso_version}"
	sed -i "s|^iso_url=.*|iso_url=\"${ISO_URL}\"|g" "${iso_url_file}"
	sed -i "s|^iso_checksum_url=.*|iso_checksum_url=\"${ISO_CHECKSUM_URL}\"|g" "${iso_url_file}"
}

prepare_iso2qcow2()
{
	log_info "starting prepare iso2qcow2 env ..."
	get_code_iso2qcow2

	config_pip_proxy
	config_iso_conf
	config_iso_url
}

run_iso2qcow2()
{
	log_info "starting run iso2qcow2 ..."
	${ISO2QCOW2_DIR}/auto-install-iso.sh
}

get_code_crystal_ci()
{
	[ -d "${CCI_SRC}" ] && rm -rf "${CCI_SRC}"
	git clone "$CRYSTAL_CI_GIT_URL" "${CCI_SRC}"
}

config_rootfs_dir()
{
	ROOTFS_DES_DIR=${NFS_LOCAL_PATH}/$(date "+%Y%m%d-%H%M%S")
	[ -d "${ROOTFS_DES_DIR}" ] &&
		ROOTFS_DES_DIR="${ROOTFS_DES_DIR}-${HOSTNAME##*--}"
	mkdir -p "$ROOTFS_DES_DIR"
}

prepare_qcow2rootfs()
{
	log_info "starting prepare qcow2rootfs env ..."
	get_code_crystal_ci

	install_pkgs "docker"
	systemctl start docker

	config_rootfs_dir
	export CCI_SRC
	export HOME="/root"
}

run_qcow2rootfs()
{
	log_info "starting run qcow2rootfs ..."
}

test_rootfs()
{
	log_info "starting test rootfs ..."
}

update_sha256sum_file()
{
	[ -f "${CHECKSUM_FILE_CACHE}" ] && rm -f "${CHECKSUM_FILE_CACHE}"
	wget -c -O "${CHECKSUM_FILE_CACHE}" "${ISO_CHECKSUM_URL}"
}

post_works()
{
	log_info "starting post works ..."

	update_sha256sum_file

	umount "${NFS_LOCAL_PATH}"

	log_info "iso2rootfs finished"
}

main()
{
	check_yaml_vars
	check_sha256sum_update
	check_os

	prepare_iso2rootfs

	prepare_iso2qcow2
	run_iso2qcow2

	prepare_qcow2rootfs
	run_qcow2rootfs

	test_rootfs

	post_works
}

main
