# First part (for drv_funcs.c) is patch from Mel Gorman's MMTests
diff --git a/src/drv_funcs.c.orig b/src/drv_funcs.c
index f11a988..7fe7348 100644
--- a/src/drv_funcs.c.orig
+++ b/src/drv_funcs.c
@@ -171,7 +171,7 @@ int write_debug_file(char *debug_msg)
 
 char *ext_strcat(char *s1, char *s2)
 {
-	char *stmp = (char*)malloc(strlen(s1)+strlen(s2));
+	char *stmp = (char*)malloc(strlen(s1)+strlen(s2)+1);
 	stmp[0] = '\0';
 	strcat(stmp,s1);
 	strcat(stmp,s2);
--- a/src/creat_clo.c.orig
+++ b/src/creat_clo.c
@@ -88,8 +88,8 @@ source_file *creat_clo_c()
  * SIGUSR2, a message is printed and 'error' is set to 1 which
  * will terminate the test.
  */
-static int sigcount;		/* count of signals */
-static int error;		/* no errors now */
+static volatile int sigcount;		/* count of signals */
+static volatile int error;		/* no errors now */
 static void sighandler(int sig)
 {				/* trap handler */
 	signal(SIGUSR2, sighandler);	/* install the signal hander */
--- a/src/drv_funcs.c.orig
+++ b/src/drv_funcs.c
@@ -634,9 +634,11 @@ void repeat_fix_results(int repeat, int
 	} else {
 		sprintf(m1_buf, "mv multiuser.ss multiuser.%d.ss", repeat);
 		system(m1_buf);
+		/*
 		sprintf(m1_buf, "mv multiuser.csv multiuser.%d.csv",
 			repeat);
 		system(m1_buf);
+		*/
 		if (brief) {
 			sprintf(m1_buf,
 				"mv stp_mdata.txt stp_mdata.%d.txt",
--- a/src/creat_clo.c
+++ b/src/creat_clo.c
@@ -478,11 +478,22 @@ static int exec_test(int argc, char **ar
 								     0177));
 						}
 					} else {	/* child exit()ed */
-						if (((status >> 8) & 0377))	/* isolate status */
+						/*
+						 * Found warning of child exit with 1, check
+						 * child program (scripts/true), found warning
+						 * comes from exit code of "ls -l".  Accroding
+						 * to ls(1), ls exit with 1 "if minor
+						 * problems (e.g., cannot access
+						 * subdirectory),".  To work around the
+						 * warning ignore exit code 1 explictly.
+						 */
+						int exit_code;
+						exit_code = (status >> 8) & 0377;
+						if (exit_code && exit_code != 1) /* isolate status */
 							(void)
 							    fprintf(stderr,
 								    "\nChild process called exit(), status = %d\n",
-								    ((status >> 8) & 0377));
+								    exit_code);
 					}
 				} else if (errno == ECHILD)
 					break;
