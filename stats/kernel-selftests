#!/usr/bin/env ruby

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($PROGRAM_NAME)))

require "#{LKP_SRC}/lib/statistics"
require "#{LKP_SRC}/lib/string_ext"

stats = []
test_name = nil
mqueue_speed = {}
tests_stats = Hash.new { |h, k| h[k] = {} }

def futex_stat_result(futex, result, stats)
  stats << if futex['argument'] && !(futex['argument'].include? 'none')
             "futex.#{futex['subtest']}.#{futex['argument']}.#{result.downcase}: 1"
           else
             "futex.#{futex['subtest']}.#{result.downcase}: 1"
           end
  futex['argument'] = nil
end

def futex_stat(line, futex, stats)
  case line
  when /^(# )*(futex.+): /
    futex['subtest'] = $2
  when /^(# )*\s+Arguments: (.+)/
    futex['argument'] = $2.tr(' ', '_')
  when /Result\:\s+(PASS|FAIL)/, /^selftests\:.*(PASS|FAIL)/, /^(# )*(ok|not ok) \d+/
    result = $2 == 'ok' || $1 == 'PASS' ? 'PASS' : 'FAIL'
    futex_stat_result(futex, result, stats)
  end
end

def memory_hotplug_stat(line, memory_hotplug, stats)
  case line
  when /selftests.*: (.+\.sh)/
    memory_hotplug['subtest'] = $1
  when /^\.\/(.+\.sh).+selftests: memory-hotplug/ # for kernel < v4.18-rc1
    memory_hotplug['subtest'] = $1
  when /^*selftests.*: memory-hotplug \[FAIL\]/
    stats << "memory-hotplug.#{memory_hotplug['subtest']}.fail: 1"
    memory_hotplug['subtest'] = nil
  when %r{make: Leaving directory .*/(.*)'}
    stats << "memory-hotplug.#{memory_hotplug['subtest']}.pass: 1" if memory_hotplug['subtest']
  end
end

# for kernel < v4.18-rc1
def mount_stat(line, mount, stats)
  case line
  when %r{if .* then ./(.*) ; else echo}
    mount['subtest'] = $1
  when /^WARN\: No \/proc\/self\/uid_map exist, test skipped/
    stats << "mount.#{mount['subtest']}.skip: 1"
    mount['subtest'] = nil
  when /(^(MS.+|Default.+) malfunctions$)|(^Mount flags unexpectedly changed after remount$)/
    stats << "mount.#{mount['subtest']}.fail: 1"
    mount['subtest'] = nil
  when %r{make: Leaving directory .*/(.*)'}
    stats << "mount.#{mount['subtest']}.pass: 1" if mount['subtest']
  end
end

def x86_stat(line, _x86, stats)
  case line
  when /can not run MPX tests/
    @pmx = 'skip'
  when /^*selftests.*: (.*) .*(PASS|FAIL)/
    test_case_name = $1.strip
    result = $2
    if test_case_name =~ /mpx-mini-test/ && @pmx
      stats << "x86.#{test_case_name}.#{@pmx}: 1"
    else
      stats << "x86.#{test_case_name}.#{result.downcase}: 1"
      @pmx = nil
    end
  end
end

def vm_stat(line, _vm, stats)
  case line
  when /^*running (.*)/
    @vm_subname = $1.strip.tr(' ', '_')
  when /^\[(PASS|FAIL|ignored_by_lkp)\]/
    stats << "vm.#{@vm_subname}.#{$1.downcase}: 1" if @vm_subname
    @vm_subname = nil
  end
end

def resctrl_stat(line, _resctrl, stats)
  if line =~ /^not ok (.*)/
    test_content = $1.strip.tr(': ', '_')
    stats << "resctrl.#{test_content}.fail: 1"
  end
end

def subtest_stat(test_name, test_case_name, subtest, result, stats)
  subtest_case_name = subtest.strip.tr(' ', '_').tr('-', '_').downcase.gsub(/[\t\r\n\f]/, '_')
  result = result.downcase.strip
  result = 'pass' if result == 'ok'
  stats << "#{test_name}.#{test_case_name}.#{subtest_case_name}.#{result}: 1"
end

def detail_stat(test_name, _test_case_name, _result, stats)
  test_case_name = _test_case_name.strip.tr(' ', '_').tr('-', '_').downcase.gsub(/[\t\r\n\f]/, '_')
  result = _result.downcase.strip
  result = 'pass' if result == 'ok'
  stats << "#{test_name}.#{test_case_name}.#{result}: 1"
end

while (line = STDIN.gets)
  line = line.resolve_invalid_bytes

  case line
  when %r{make: Entering directory .*/(.*)'}
    test_name = Regexp.last_match[1]
    if test_name == 'kmod'
        last_subtest_case_name = nil
        subtest_case_name = nil
        subtest_case_result = nil
        all_subtest_case_skip = true
    end
  when /^ok kernel supports resctrl filesystem/
    test_name = 'resctrl'
  when %r{make: Leaving directory .*/(.*)'}
    if test_name == 'memory-hotplug'
      memory_hotplug_stat(line, tests_stats['memory-hotplug'], stats)
    elsif test_name == 'mount'
      mount_stat(line, tests_stats['mount'], stats)
    else
      # rli9 FIXME: consider the input has messed text like Entering doesn't match with Leaving
      test_name = nil
      test_case_name = nil
    end
  when /^# \[       (OK|FAIL|SKIP) \] (.*)/
    next unless test_name == 'net'

    detail_stat('net', $2, $1, stats)
  when /^(ion_test.sh: .*) - \[(PASS|FAIL|SKIP)\]$/
    next unless test_name == 'android'

    detail_stat('android', $1, $2, stats)
  when /^(ok|fail|skip) \d+ (Test .*)/
    next unless test_name == 'breakpoints'

    detail_stat('breakpoints', $2, $1, stats)
  when /^# \[RUN\].*(Tests with uid .*) +++/
    next unless test_name == 'capabilities'

    test_case_name = $1.strip.tr(' ', '_').tr('-', '_').downcase
  when /^Pass (\d+) Fail (\d+) Xfail (\d+) Xpass (\d+) Skip (\d+) Error (\d+)/
    next unless test_name == 'capabilities'

    result = 'skip'
    result = 'fail' if $2 != '0' || $3 != '0' || $6 != '0'
    result = 'pass' if $2 == '0' && $3 == '0' && $6 == '0'
    stats << "#{test_name}.#{test_case_name}.#{result}: 1"
  when /^(Check .*)... \[(OK|FAIL|SKIP)\]/
    next unless test_name == 'exec'
    next if $1 =~ /execveat/

    detail_stat('exec', $1, $2, stats)
  when /^(PASS|FAIL|SKIP): (.*)/
    next unless test_name == 'ia64'

    detail_stat('ia64', $2, $1, stats)
  when /^# selftests: net: (.*)/
    test_case_name = $1
  when /^# selftests: netfilter: (.*)/
    test_case_name = $1
  when /^# (PASS|FAIL|SKIP): (.*)/
    next unless %w(net netfilter).include? test_name

    subtest_stat(test_name, test_case_name, $2, $1, stats) unless %w(fib_nexthops.sh).include? test_case_name
  when /^# (Single|Multipath|Single|Admin|Local|Single|FIB|IPv4|IPv6|Basic|Legacy|Routing) (.*)/
    next unless %w(icmp_redirect.sh).include? test_case_name

    subtest_case_name1 = $1 + ' ' + $2
  when /^# TEST SECTION: (.*)/
    next unless %w(fib-onlink-tests.sh fib_rule_tests.sh).include? test_case_name

    subtest_case_name1 = $1
  when /^# TEST SUBSECTION: (.*)/
    next unless test_case_name == 'fib-onlink-tests.sh'

    subtest_case_name2 = $1
  when /^#     TEST: (.*) \[ ?(OK|FAIL|SKIP) ?\]$/
    next unless %w(fib-onlink-tests.sh fib_rule_tests.sh).include? test_case_name

    subtest_case_name = subtest_case_name1 + '.' + $1
    subtest_case_name = subtest_case_name1 + '.' + subtest_case_name2 + '.' + $1 if test_case_name == 'fib-onlink-tests.sh'
    subtest_stat('net', test_case_name, subtest_case_name, $2, stats)
  when /^# TEST: (.*) \[ ?(PASS|OK|FAIL|SKIP) ?\]/
    next unless %w(pmtu.sh icmp_redirect.sh ip6_gre_headroom.sh).include? test_case_name

    subtest_case_name = $1
    subtest_case_name = subtest_case_name1 + '.' + $1 if %w(icmp_redirect.sh).include? test_case_name
    subtest_stat('net', test_case_name, subtest_case_name, $2, stats)
  when /^#   (net|port)(.*)\[( OK|FAIL|SKIP)/
    next unless test_case_name == 'nft_concat_range.sh'

    subtest_case_name = subtest_case_name1 + '.' + $1 + $2
    subtest_stat('netfilter', test_case_name, subtest_case_name, $3, stats)
  when /^# (UDP|TCP|DCCP) (.*) \.\.\. (pass|fail|skip)/
    next unless test_case_name == 'reuseport_addr_any.sh'

    subtest_case_name = $1 + ' ' + $2
    subtest_stat('net', test_case_name, subtest_case_name, $3, stats)
  when /^# selftests: kmod: (.*)/
    test_case_name = $1
  when /^# Running test: (kmod_test.*) - run/, /^# Test completed/
    next unless test_name == 'kmod'

    last_subtest_case_name = subtest_case_name
    # '# Test completed' marks the whole kmod tests finished, where no $1
    subtest_case_name = $1 unless $1.nil?
    # a test may run several times, regard them as one test
    # # Running test: kmod_test_0005 - run #1
    # # kmod_test_0005: OK! - loading kmod test
    # # kmod_test_0005: OK! - Return value: 0 (SUCCESS), expected SUCCESS
    # # Tue Sep 15 17:57:54 UTC 2020
    # # Running test: kmod_test_0005 - run #2
    # # kmod_test_0005: OK! - loading kmod test
    # # kmod_test_0005: OK! - Return value: 0 (SUCCESS), expected SUCCESS
    # need notice when meet 'Test completed', when $1 is nil, so
    # subtest_case_name doesn't change. below "&& !$1.nil?" is used to
    # avoid missing last subtest handling
    next if subtest_case_name == last_subtest_case_name && !$1.nil?

    # when starting 'Running' first test, there is no last_subtest_case_name
    next if last_subtest_case_name.nil?
    # subtest_case_result and all_subtest_case_skip are still corresponding to last_subtest_case_name here.
    # need calibrate result in one situation when meet -
    # (1) no 'FAIL'
    # (2) not all subtests are 'SKIP'
    # whatever the subtest_case_result is 'OK' or 'SKIP' here, regard whole subtest 'pass'
    subtest_case_result = 'OK' if subtest_case_result != 'FAIL' && !all_subtest_case_skip
    subtest_stat('kmod', test_case_name, last_subtest_case_name, subtest_case_result, stats)
    # reset subtest_case_result and all_subtest_case_skip for new subtest
    subtest_case_result = nil
    all_subtest_case_skip = true
  when /^# (kmod_test.*|kmod_check_visibility): (OK|FAIL|SKIP)/
    next unless test_name == 'kmod'

    # if any single test fails, regard the whole subtest fail
    next if subtest_case_result == 'FAIL'
    subtest_case_result = $2
    # if results are OK+SKIP, will regard as 'pass'.
    # when all subtest results are 'SKIP', regard the subtest as 'skip'
    next unless all_subtest_case_skip
    all_subtest_case_skip = subtest_case_result == 'SKIP'
  when /# selftests: membarrier: (.*)/
    test_case_name = $1
  when /# selftests: pidfd: (.*)/
    test_case_name = $1
  when /# (ok|fail|skip) \d+ (.*):(.*)/
    if test_name == 'pidfd'
      subtest_stat('pidfd', test_case_name, $2, $1, stats) unless test_case_name == 'pidfd_test'
    elsif test_name == 'timens'
      subtest_case_name = $2 + ':' + $3
      subtest_stat('timens', test_case_name, subtest_case_name, $1, stats)
    end
  when /# selftests: pstore: (.*)/
    test_case_name = $1
  when /# selftests: timens: (.*)/
    test_case_name = $1
  when /# (ok|fail|skip) \d+ (.*)/
    futex_stat(line, tests_stats['futex'], stats) if test_name == 'futex'
    subtest_stat('timens', test_case_name, $2, $1, stats) if test_name == 'timens'
  when /^# selftests: timers: (.*)/
    test_case_name = $1
  when /^# (.*)(\.\.\.|:| ) \[(OK|FAIL|SKIP|UNSUPPORTED)\]/
    next unless test_name == 'timers' && test_case_name != 'set-timer-lat'

    subtest_stat('timers', test_case_name, $1, $3, stats)
  when /^# running (.*)/
    next unless test_name == 'vm'

    test_case_name = $1
  when /^# \[(PASS|FAIL|SKIP)\]/
    next unless test_name == 'vm'

    detail_stat('vm', test_case_name, $1, stats)
  when /^*selftests.*: (.*) .*(\[|\[ )(PASS|FAIL|SKIP)/
    next if test_name == 'bpf'

    if test_name == 'futex'
      futex_stat(line, tests_stats['futex'], stats)
    elsif test_name == 'memory-hotplug'
      memory_hotplug_stat(line, tests_stats['memory-hotplug'], stats)
    elsif test_name == 'x86'
      x86_stat(line, tests_stats['x86'], stats)
    elsif test_name == 'vm'
      vm_stat(line, tests_stats['vm'], stats)
    else
      stats << "#{test_name}.#{Regexp.last_match[1].strip}.#{Regexp.last_match[3].downcase}: 1"
    end
  when /^# selftests: livepatch: (.*)/
    test_case_name = $1
  when /^# TEST: (.*) \.\.\. (ok|fail|skip)/
    next unless test_name == 'livepatch'

    subtest_stat('livepatch', test_case_name, $1, $2, stats)
  when /^# selftests: bpf: (.*)/
    test_case_name = $1
  when /^# #\d+\/(.*) (OK|SKIP|FAIL).*/
    next unless test_case_name == 'test_verifier'

    subtest_stat('bpf', test_case_name, $1, $2, stats)
  when /^# #\d+(\/\d+)? (.*):(OK|FAIL|SKIP)/
    next unless %w(test_progs test_progs-no_alu32).include? test_case_name

    subtest_stat('bpf', test_case_name, $2, $3, stats) if $1.nil?
  when /^# \[TEST \d+\]: (.*): (PASS|FAIL|SKIP)/
    next unless test_case_name == 'test_sockmap'

    subtest_stat('bpf', test_case_name, $1, $2, stats)
  when /^# (.*)\[\d+\] (.*): ?(OK|FAIL|SKIP)/
    next unless test_case_name == 'test_btf'

    subtest_case_name = $1 + '.' + $2
    subtest_stat('bpf', test_case_name, subtest_case_name, $3, stats)
  when /^# Running kernel configuration test \d+ -- (.*)/
    next unless test_name == 'firmware'

    test_case_name = $1
  when /^# Testing with the (file .*)\.\.\.$/
    next unless test_name == 'firmware'

    subtest_case_name1 = $1
  when /^# (.*): ?(PASS|OK|FAIL|SKIP|Pass|Fail|Skip)/
    if (%w(test_maps test_lru_map test_hashmap).include? test_case_name) && ($1 != test_case_name)
      subtest_stat('bpf', test_case_name, $1, $2, stats)
    elsif test_name == 'firmware'
      subtest_case_name = subtest_case_name1 + '.' + $1
      subtest_stat('firmware', test_case_name, subtest_case_name, $2, stats)
    end
  when /^# Test case: (.*) .. \[(PASS|FAIL|SKIP)\]/
    next unless %w(test_sysctl test_sock test_sock_addr.sh).include? test_case_name

    subtest_stat('bpf', test_case_name, $1, $2, stats)
  when /^# Test   \d+: (.*) ... (PASS|Fail).*/
    next unless test_case_name == 'test_align'

    subtest_stat('bpf', test_case_name, $1, $2, stats)
  when /^# (.*) \.\.\. (ok|fail|skip)/
    if test_case_name == 'test_bpftool.sh'
      subtest_stat('bpf', test_case_name, $1, $2, stats)
    elsif test_name == 'pstore'
      subtest_stat('pstore', test_case_name, $1, $2, stats)
    end
  when /^# selftests: mqueue: (.*)/
    test_case_name = $1
  when /^# (.*):.*(PASS|FAIL|SKIP)/
    next unless test_name == 'mqueue'

    subtest_stat('mqueue', test_case_name, $1, $2, stats)
  when /Test #([1-9].*):/
    next unless test_name == 'mqueue'

    mqueue_test = Regexp.last_match[1]
  when /(Send|Recv) msg:/
    io = Regexp.last_match[1]
  when %r{(\d+) nsec/msg}
    mqueue_speed[mqueue_test + '.' + io] = Regexp.last_match[1].to_i
  when /: recipe for target.+failed$/, /^make: \*\*\* (.*) (Error \d+|Stop\.)$/
    next unless test_name

    # do not count make fail in nr_test, which is for sub test number
    stats << "#{test_name}.make_fail: 1"
  when /^ignored_by_lkp (.*) test/
    stats << "#{$1}.ignored_by_lkp: 1"
  when /^(ok|not ok) \d+ selftests: (\S*): (\S*)( # SKIP)?/
    next if %w(memory-hotplug).include? test_name

    test_name = $2
    test_case_name = $3
    result = $4 =~ /SKIP/ ? 'skip' : 'fail'
    result = 'pass' if $1 == 'ok'
    stats << "#{test_name}.#{test_case_name}.#{result}: 1" unless %w(pmtu.sh fib_rule_tests.sh reuseport_addr_any.sh traceroute.sh altnames.sh icmp_redirect.sh ip6_gre_headroom.sh fib-onlink-tests.sh mq_open_tests pidfd_fdinfo_test pidfd_open_test pidfd_poll_test pidfd_wait pstore_tests pstore_post_reboot_tests kmod.sh).include? test_case_name
  when /^# (.*) ?\[ (OK|FAIL|SKIP) \]/
    next unless test_name == 'mptcp'

    # $1 is "ns1 MPTCP -> ns1 (10.0.1.1:10000      ) MPTCP   (duration  1089ms)"
    # test_case_name is "ns1 MPTCP -> ns1 (10.0.1.1:10000      ) MPTCP"
    # $2 is "OK", $2 should be saved before changing $1
    result = $2
    test_case_name = $1.gsub(/\(duration(.*)\)/, '')
    detail_stat('mptcp', test_case_name, result, stats)
  when /^# TEST: (.*)/
    next unless test_case_name == 'nft_concat_range.sh'

    subtest_case_name1 = $1
  else
    if test_name == 'futex'
      futex_stat(line, tests_stats['futex'], stats)
    elsif test_name == 'memory-hotplug'
      memory_hotplug_stat(line, tests_stats['memory-hotplug'], stats)
    elsif test_name == 'mount'
      mount_stat(line, tests_stats['mount'], stats)
    elsif test_name == 'x86'
      x86_stat(line, tests_stats['x86'], stats)
    elsif test_name == 'vm'
      vm_stat(line, tests_stats['vm'], stats)
    elsif test_name == 'resctrl'
      resctrl_stat(line, tests_stats['resctrl'], stats)
    end
  end
end

stats << "mqueue.nsec_per_msg: #{mqueue_speed.values.average.to_i}" unless mqueue_speed.empty?
if test_name == 'resctrl'
  stats << 'resctrl.resctrl_tests.pass: 1' unless stats.any? { |stat| stat =~ /resctrl\..+\.fail: 1/ }
end

stats.each { |stat| puts stat }
