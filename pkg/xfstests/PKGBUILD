pkgname=xfstests
pkgver=git
pkgrel=1
url='https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git'
arch=('i386' 'x86_64')
license=('GPL')
source=('https://git.kernel.org/pub/scm/linux/kernel/git/jaegeuk/f2fs-tools.git' 'https://git.kernel.org/pub/scm/fs/xfs/xfstests-dev.git')
md5sums=('SKIP' 'SKIP')

build_upstream_ext4_denylist()
{
	benchmark_path="${pkgdir}/lkp/benchmarks/${pkgname}"
	wget -O ext4-upstream-denylist https://git.kernel.org/pub/scm/fs/ext2/xfstests-bld.git/plain/kvm-xfstests/test-appliance/files/root/fs/ext4/exclude || return
	cat ext4-upstream-denylist | grep -v '^#' | grep 'generic/' | awk -F'/' '{print $2}' >> $benchmark_path/tests/generic-ext4-ignore
	cat ext4-upstream-denylist | grep -v '^#' | grep 'ext4/' | awk -F'/' '{print $2}' >> $benchmark_path/tests/ext4-ignore
}

build_install_xfstests()
{
	cd ${srcdir}/xfstests-dev || return
	## Currently, ./configure file can't work with "--prefix" option correctly,
	## so we just use the "make" command to generate the execuable file.
	make
}

build_install_f2fs_tools()
{
	cd ${srcdir}/f2fs-tools || return
	./autogen.sh || return
	./configure || return
	make || return
	make install || return
	make install DESTDIR="${pkgdir}"
}

# Automatically generate ignore file to skip test cases which can not be enabled at present.
build_ignore_file()
{
	benchmark_path="${pkgdir}/lkp/benchmarks/${pkgname}"
	cd ${srcdir}/xfstests-dev || return
	git grep "_require_xfs_mkfs_without_validation" | grep -v "common/" | awk -F '[:/]' '{print $3}' > $benchmark_path/tests/xfs-ignore
	git grep _require_xfs_io_command | grep -E "fzero|fcollapse|finsert|fcollapse" | grep generic | awk -F '[:/]' '{print $3}' > $benchmark_path/tests/generic-btrfs-ignore

	build_upstream_ext4_denylist
}

build_xfs_file()
{
	benchmark_path="${pkgdir}/lkp/benchmarks/${pkgname}"
	cd ${srcdir}/xfstests-dev || return
	git grep -l "_require_realtime" | grep tests/xfs | awk -F/ '{ print $3 }' > $benchmark_path/tests/xfs-external
	git grep -L "_require_realtime" $(git grep -l "_require_scratch_reflink" $(git grep -l "_require_xfs_scratch_rmapbt" | grep tests/xfs))  | awk -F/ '{print $3}' > $benchmark_path/tests/xfs-reflink_rmapbt
	git grep -L "_require_realtime" $(git grep -L "_require_scratch_reflink" $(git grep -l "_require_xfs_scratch_rmapbt" | grep tests/xfs))  | awk -F/ '{print $3}' > $benchmark_path/tests/xfs-rmapbt
	git grep -L "_require_realtime" $(git grep -L "_require_xfs_scratch_rmapbt" $(git grep -l "_require_scratch_reflink" | grep tests/xfs))  | awk -F/ '{print $3}' > $benchmark_path/tests/xfs-reflink
}


build()
{
	benchmark_path="${pkgdir}/lkp/benchmarks/${pkgname}"
	cd $srcdir
	mkdir -p ${benchmark_path}
	mkdir -p ${benchmark_path}/tests

	build_install_xfstests || return
	build_install_f2fs_tools || return
	build_ignore_file || return
	build_xfs_file || return
}

package()
{
	generate_tests || return
	separate_tests || return
}

generate_tests()
{
	benchmark_path="${pkgdir}/lkp/benchmarks/${pkgname}"
	cp -af $srcdir/xfstests-dev/* $benchmark_path
	cp -af $LKP_SRC/pkg/${pkgname}/addon/tests/* $benchmark_path/tests
	## generate the new add subcase automatically after every upgrade xfstests
	cd $benchmark_path/tests
	./update-new-cases.sh ext4
	./update-new-cases.sh btrfs
	./update-new-cases.sh xfs
	./update-new-cases.sh generic
}

# Some files contain too many tests, which are split for easy testing
separate_tests()
{
	benchmark_path="${pkgdir}/lkp/benchmarks/${pkgname}"
	cd $benchmark_path/tests
	separate_special_tests || return

	# Option "-n r/N" to avoid splitting lines
	split xfs-new -d -n r/30 xfs-group
	split btrfs-new -d -n r/3 btrfs-group
	split generic-new -d -n r/30 generic-group
	split ext4-new -d -n r/1 ext4-group
}

# Some special tests need to be separated and tested separately
separate_special_tests()
{
	# These special tests are written in the relevant files under LKP-SRC/pack/xfstests-addon/tests
	files=("dax" "logwrites" "no_bug_assert" "special_tests" "ignored_by_lkp")
	ignored_tests=$(cat "ignored_by_lkp" | grep -v "#")
	for file in ${files[@]}
	do
		if [[ "$file" != "ignored_by_lkp" ]]; then
			for ignored_test in ${ignored_tests[@]}
			do
				sed -i "/$ignored_test/d" $file
			done
		fi
		tests=$(cat $file | grep -v "#")
		for test in ${tests[@]}
		do
			arrary=(`echo $test | tr '-' ' '`)
			sed -i "/${arrary[1]}/d" ${arrary[0]}-new
			if [[ "$file" == "special_tests" ]]; then
				echo ${arrary[1]} > ./$test
			elif [[ "$file" != "ignored_by_lkp" ]]; then
				echo ${arrary[1]} >> ./${arrary[0]}-$file
			fi
		done
	done
}
