#!/bin/bash

. $LKP_SRC/lib/result.sh
. $LKP_SRC/lib/lkp_cmd.sh
. $LKP_SRC/lib/env.sh
. $LKP_SRC/lib/constant.sh
. $LKP_SRC/lib/lkp_path.sh

if ! [ $(id -u) = 0 ]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

script_name=$(basename $0)

[ -n "$HOSTNAME" ] || HOSTNAME=$(hostname)		#?chomp
[ -n "$LKP_SRC" ] || export LKP_SRC=$(dirname $(dirname $(readlink -e -v $0)))
TMP="$LKP_SRC/tmp"

usage() {
	echo "Usage: lkp $script_name [options] [<script>/<jobfile>]"
	echo "options: "
	echo "-f|--force: force to install testsuites"
	echo "--hdd partition: HDD partition for IO tests"
	echo "--ssd partition: SSD partition for IO tests"
	echo "--dry-run: preview changes will made testbox by install"
	echo "--china: install gem packages from the mirror in China"
	echo "--skip-base: skip to install base support"
	echo "--help: show this message"
}

hdd_index=1
ssd_index=1

while [ $# -gt 0 ]
do
	case "$1" in
		--help)
		usage
		exit
		;;
		--hdd)
		hdd_partitions[$hdd_index]=$2
		hdd_index=$((hdd_index+1))
		shift
		;;
		--ssd)
		ssd_partitions[$ssd_index]=$2
		ssd_index=$((ssd_index+1))
		shift
		;;
		--dry-run)
		DRY_RUN=0
		;;
		--china)
		CHINA=0
		;;
		--force|-f)
		FORCE_MODE=true
		;;
		*)
		break
		;;
	esac
	shift
done

validate_parameters()
{
    local ret=0
    for filename in "$@"
    do
        if [ -x "$filename" ]; then
            continue
        elif [ ${filename##*.} = "yaml" ]; then
            if [ -f $filename ]; then
                grep -q '^arch: ' $filename || {
                    echo "only atomic jobs can be installed" >&2
                    echo "Please run lkp split-job $filename first" >&2
                    ret=1
                }
            else
                echo "$0: cannot find file $filename" >&2
                ret=1
            fi
        else
            echo "$0: skip unknown parameter $filename" >&2
            ret=1
        fi
    done
    return $ret
}

make_wakeup() {
	echo "make -C $LKP_SRC/bin/event"
	[ -n "$DRY_RUN" ] && return

	[ -x "$LKP_SRC/bin/event/wakeup" ] || {
		make -C "$LKP_SRC/bin/event" wakeup
	}
}

# todo: make paths configurable and less intrusive to developer's system
# currently it's hard coded in a number of places, should be changed together
create_lkp_dirs() {
	[ -n "$DRY_RUN" ] && return

	mkdir -p $TMP
	mkdir -p $KTEST_PATHS_DIR
	mkdir -p '/lkp/benchmarks'
}

create_host_config() {
	[ -n "$DRY_RUN" ] && return

	local host_config="$LKP_SRC/hosts/${HOSTNAME}"
	[ -e $host_config ] || {
		echo "Creating testbox configuration file: $host_config."

		local mem_kb="$(grep MemTotal /proc/meminfo | awk '{print $2}')"
		local mem_gb="$(((mem_kb)/1024/1024))"
		local nr_cpu=$(nproc)

		cat <<EOT >> $host_config
nr_cpu: $nr_cpu
memory: ${mem_gb}G
hdd_partitions: ${hdd_partitions[*]}
ssd_partitions: ${ssd_partitions[*]}
local_run: 1
EOT
	}

	local tbox_group
	set_tbox_group $HOSTNAME

	local host_group_config="$LKP_SRC/hosts/${tbox_group}"
	[ -e $host_group_config ] || {
		echo "Creating testbox group configuration file: $host_group_config."
		cp $host_config $host_group_config
	}
}

bundle_install() {
	local ruby_version=$(ruby --version)
	if [[ "$ruby_version" != "${ruby_version#ruby 3}" ]]; then
		bundle install
	elif [[ "$ruby_version" != "${ruby_version#ruby 2}" ]]; then
		BUNDLE_GEMFILE=Gemfile.2 bundle install
	else
		echo "unknown ruby version: $ruby_version"
		exit 1
	fi
}

bundle_install_china() {
	local tmpdir=$(mktemp -d /tmp/lkp-install-china-XXXXXX)
	trap "rm -rf $tmpdir" EXIT
	cp $LKP_SRC/Gemfile $tmpdir/Gemfile
	cp $LKP_SRC/Gemfile.lock $tmpdir/Gemfile.lock
	(cd $tmpdir || exit; bundle config --local mirror.https://rubygems.org https://gems.ruby-china.com; bundle_install)
}

makepkg_install() {
	local pkg=$1
	local force_opt=

	[ -n "$FORCE_MODE" ] && force_opt="-f"
	if [ -d "$LKP_SRC/pkg/$pkg" ]; then
		(
			cd "$LKP_SRC/pkg/$pkg" || exit
			echo "Building package with: $LKP_SRC/pkg/$pkg/PKGBUILD"
			PACMAN="$LKP_SRC/sbin/pacman-LKP" CARCH=$arch BUILDDIR="$HOME/.cache/lkp-tests/pkg-builddir" \
			"$LKP_SRC/sbin/makepkg" --config "$(lkp_src)/etc/makepkg.conf" -s -i --skippgpcheck "$force_opt"
		)
	else
		return 0
	fi
}

verify_install() {
	local pkg=$1
	case $DISTRO in
		debian|ubuntu)
			[[ ! $(dpkg -V "$pkg" 2>&1) ]] || [[ ! $(dpkg -V "$pkg-lkp" 2>&1) ]];;
		centos|fedora|openeuler)
			[[ ! $(rpm -V "$pkg" 2>&1) ]] || [[ ! $(rpm -V "$pkg-lkp" 2>&1) ]];;
		*)
			return 1;;
	esac
}

make_install_packages() {
	for pkg
	do
		if ! verify_install $pkg; then
			makepkg_install "$pkg" || echo "Install $pkg failed"
		fi
	done
}

install_packages() {
	local generic_packages="$*"

	echo "Installing packages with: $LKP_SRC/distro/installer $distro $generic_packages"
	[ -n "$DRY_RUN" ] && return

	if [ "$distro" = "centos" -o "$distro" = "aliyun" ]; then
		local ocfs2_tools_name=$(echo "$generic_packages" | grep 'ocfs2-tools')
		if [ -n "$ocfs2_tools_name" ]; then
			. $LKP_SRC/distro/$distro
			install_ocfs2_tools "$ocfs2_tools_name"
		fi
	fi

	$LKP_SRC/distro/installer $distro $generic_packages || {
		echo "Cannot install some packages in $LKP_SRC/distro/depends/${script}"
		exit 1
	}
}

install_base_support()
{
	echo "Installing ruby gems..."

	if [ -n "$CHINA" ]; then
		gem install bundler --clear-sources -s https://gems.ruby-china.com/
		bundle_install_china
	else
		(
			cd $LKP_SRC || exit
			gem install bundler
			bundle_install
		)
	fi

	make_wakeup
	create_lkp_user
	create_lkp_dirs
	create_host_config
}

. $LKP_SRC/lib/install.sh

detect_system
distro=$_system_name_lowercase

DISTRO=$distro
export DISTRO

[ -x $LKP_SRC/distro/$distro ] || {
	echo "Not a supported system, cannot install packages."
	exit 1
}

export LKP_LOCAL_RUN=1

validate_parameters "$@" || exit 1

if [[ -z "$1" ]]; then
	install_base_support
	all_scripts='lkp makepkg'
else
	all_scripts=
fi

for filename in "$@"
do
	if [ -x "$filename" ]; then
		all_scripts+=" $(basename $filename) "
	elif [ ${filename##*.} = "yaml" ]; then
		parse_yaml $filename
		all_scripts+=" $scripts "
	fi
done

mapping=$($LKP_SRC/sbin/pkgmap --to-os="$distro@_system_version:$(arch)" $all_scripts)
pip_packages=$(echo "$mapping" | grep "^pip: " | cut -f2 -d:)
gem_packages=$(echo "$mapping" | grep "^gem: " | cut -f2 -d:)
os_packages=$(echo "$mapping" | grep "^os: " | cut -f2 -d:)
pkgbuild_packages=$(echo "$mapping" | grep "^PKGBUILD: " | cut -f2 -d:)

install_packages $os_packages
make_install_packages $pkgbuild_packages
