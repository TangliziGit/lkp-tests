disable=SC2154 # is referenced but not assigned
disable=SC1090 # Can't follow non-constant source. Use a directive to specify location.
disable=SC2046 # Quote this to prevent word splitting.
disable=SC2128 # Expanding an array without an index only gives the first element.
disable=SC2206 # Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a.
disable=SC2053 # Quote the right-hand side of = in [[ ]] to prevent glob matching.
disable=SC2012 # Use find instead of ls to better handle non-alphanumeric filenames.
disable=SC2034 # appears unused. Verify use (or export if used externally).
disable=SC1091 # Not following: was not specified as input
disable=SC2185 # Some finds don't have a default path. Specify '.' explicitly
disable=SC2002 # Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead
disable=SC2207 # Prefer mapfile or read -a to split command output (or quote to avoid splitting)
disable=SC2181 # Check exit code directly with e.g. 'if mycmd;', not indirectly with $?
disable=SC2035 # Use ./*glob* or -- *glob* so names with dashes won't become options
disable=SC2178 # Variable was used as an array but is now assigned a string
disable=SC2038 # Use -print0/-0 or -exec + to allow for non-alphanumeric filenames
disable=SC2010 # Don't use ls | grep. Use a glob or a for loop with a condition to allow non-alphanumeric filenames
disable=SC2166 # Prefer [ p ] || [ q ] as [ p -o q ] is not well defined
disable=SC2153 # Possible misspelling: may not be assigned, but is
disable=SC2220 # Invalid flags are not handled. Add a *) case
disable=SC2093 # Remove "exec " if script should continue after this command
disable=SC2064 # Use single quotes, otherwise this expands now rather than when signalled

disable=SC2028 # echo won't expand escape sequences. Consider printf.
disable=SC2001 # See if you can use ${variable//search/replace} instead
disable=SC2184 # Quote arguments to unset so they're not glob expanded.
disable=SC2162 # read without -r will mangle backslashes
disable=SC2076 # Don't quote rhs of =~, it'll match literally rather than as a regex.
disable=SC2144 # -e doesn't work with globs. Use a for loop.
disable=SC2044 # For loops over find output are fragile. Use find -exec or a while read loop.
disable=SC2045 # Iterating over ls output is fragile. Use globs.
disable=SC2231 # Quote expansions in this for loop glob to prevent wordsplitting, e.g. "$dir"/*.txt
disable=SC2155 # Declare and assign separately to avoid masking return values
disable=SC2254 # Quote expansions in case patterns to match literally rather than as a glob
disable=SC2199 # Arrays implicitly concatenate in [[ ]]. Use a loop (or explicit * instead of @)
disable=SC2087 # Quote 'EOF' to make here document expansions happen on the server side rather than on the client
disable=SC2145 # Argument mixes string and array. Use * or separate argument
disable=SC2124 # Assigning an array to a string! Assign as array, or use * instead of @ to concatenate
disable=SC2125 # Brace expansions and globs are literal in assignments. Quote it or use an array.
disable=SC2090 # Quotes/backslashes in this variable will not be respected.
disable=SC2054 # Use spaces, not commas, to separate array elements.
disable=SC2089 # Quotes/backslashes will be treated literally. Use an array.
disable=SC2039 # In POSIX sh, something is undefined.
disable=SC2048 # Use "$@" (with quotes) to prevent whitespace problems
disable=SC2068 # Double quote array expansions to avoid re-splitting elements
disable=SC2116 # Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.
disable=SC2163 # This does not export FOO. Remove $/${} for that, or use ${var?} to quiet.
